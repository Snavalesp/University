# -*- coding: utf-8 -*-
"""
FDTD para ondas electromagnéticas en 1D
"""

import numpy as np
from math import pi, sin
from matplotlib import pyplot as plt

# Se definen las matrices para almazenar la información de los campos eléctrico y magnético
npts = 300
ex = np.zeros(npts)
hy = np.zeros(npts)

#Se le da un tamaño a cada punto y a su ubicación temporal, además de la frecuencia de la onda 
ddx = 0.01 # Cell size
dt = ddx / 6e8 # Time step size
freq_in = 10e8
boundary_low = [0, 0]
boundary_high = [0, 0]

# Se crea la matriz para el material dieléctrico, con sus respectivas propieades espaciales y electromagnéticas
cb = np.ones(npts)
cb = 0.5 * cb

#Se el da el tamaño al material dieléctrico y los puntos espaciales donde inicia y termina
cb1_start= 96
cb1_finish = 231 #Se da los límites para las capas anti-reflectivas

cb_start = 100
cb_finish = 227#se dan los límites para el radome
epsilon = 12
epsilon1 =3.46
cb[cb_start:cb_finish] = 0.5 / epsilon #Se inicia la matriz con el tamaño del radome y con su respectiva permitividad

#Se inician las matrices para laz capas anti-reflectivas con sus respectivas permitividades
#Si se desea observar el comportamiento sin las capas tan solo es necesario evitar la lectura de las siguientes dos líneas
cb[cb1_start:cb_start] = 0.5 / epsilon1
cb[cb_finish:cb1_finish] = 0.5/ epsilon1 


nsteps = 1500

# Variables para almacenar el mayor valor de onda de salida y dentro del dieléctrico
#lo que indicaría el índice de transmisión y la amplitud de salida
tr=0
sal=0


# Valores temporales, para graficar espacialmente la onda
plotting_points = [
{'num_steps': 250, 'data_to_plot': None, 'label': ''},
{'num_steps': 1400, 'data_to_plot': None, 'label': 'FDTD cells'}
]

# Principal loop para calcular los valores de los campos mendiante el FDTD
# Donde se cuentan y almazenas en las matrices de los campos los pasos en el tiempo 
for time_step in range(1, nsteps + 1):

    # Calculo del campo eléctrico
    for k in range(1, npts):
        ex[k] = ex[k] + cb[k] * (hy[k - 1] - hy[k])
  
    #Ecuación de la onda sinusoidal, con su respectiva frecuencia
    pulse = sin(2 * pi * freq_in * dt * time_step)
    ex[5] = pulse + ex[5]
   
    # Condiciones de absroción de frontera 
    ex[0] = boundary_low.pop(0)
    boundary_low.append(ex[1])
    ex[npts - 1] = boundary_high.pop(0)
    boundary_high.append(ex[npts - 2])
   
    # Cálculo del campo magnético
    for k in range(npts - 1):
        hy[k] = hy[k] + 0.5 * (ex[k] - ex[k + 1])

    # Se almacenas los datos de la matriz para graficar
    for plotting_point in plotting_points:
        if time_step == plotting_point['num_steps']:
            plotting_point['data_to_plot'] = np.copy(ex)
            
    #Hallar las amplitudes máximas de la onda dentro del dieléctrico y de salida    
    if time_step == 600:
        for j in range(100, 227):
            if abs(ex[j])>tr:    
                tr=abs(ex[j])
        re=1-tr #### Constante de refracción a partir de la constante de transmisión hallada
    if time_step == 1400:
        for j in range(257,300):
            if abs(ex[j])>sal:
                sal=abs(ex[j])

# Plot de las gráficas
plt.rcParams['font.size'] = 12
fig = plt.figure(figsize=(8, 3.5))
def plot_e_field(data, timestep, epsilon, cb, label):
    """Plot of E field at a single time step"""
    plt.plot(data, color='k', linewidth=1)
    plt.ylabel('E$_x$', fontsize='14')
    plt.xticks(np.arange(0, npts-1, step=npts/10))
    plt.xlim(0, npts-1)
    plt.yticks(np.arange(-1, 1.2, step=1))
    plt.ylim(-1.2, 1.2)
    plt.text(50, 0.5, 'T = {}'.format(timestep),horizontalalignment='center')             
    plt.plot((0.5 / cb - 1) / 3, 'k--', linewidth=0.75)
    plt.text(170, 0.5, 'Eps = {}'.format(epsilon),horizontalalignment='center')
    plt.xlabel('{}'.format(label))
   
    # Gráfica del campo eléctrico en los time_steps definidos anteriormente 
for subplot_num, plotting_point in enumerate(plotting_points):
    ax = fig.add_subplot(2, 1, subplot_num + 1)
    plot_e_field(plotting_point['data_to_plot'],
                 plotting_point['num_steps'], epsilon, cb,
                 plotting_point['label'])
plt.subplots_adjust(bottom=0.2, hspace=0.45)
plt.show()
